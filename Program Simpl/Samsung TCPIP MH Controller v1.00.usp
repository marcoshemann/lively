/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:MHemann
System Name: Controlador Samsung Smart TV IP
System Number:1.00
Programmer:MH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "Samsung TCPIP Smart TV Controlador"
// #HINT ""
// #DEFINE_CONSTANT
 #CATEGORY "46" "TV Remote Control"  
 #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DEFINE_CONSTANT DEBUG 1

// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   	Modulo para Controle da TV Samsung Smart
	TCPIP
	Informar IP somente
	 
#HELP_END

//#DEFINE_CONSTANT Enc_Key_Mute$  "S0VZX01VVEU="
//#DEFINE_CONSTANT Enc_Key_PowerOff$ "S0VZX1BPV0VST0ZG"


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT
				KEY_POWEROFF,
				KEY_MUTE,
				KEY_VOLUP,
	 			KEY_VOLDOWN,
 				KEY_EXIT, 
			 	KEY_RETURN;

//KEY_POWERON,
// ANALOG_INPUT 
//   STRING_INPUT  Tx$[1000];
//	BUFFER_INPUT Tx$; 

DIGITAL_OUTPUT CONNECT_FB;
// ANALOG_OUTPUT 
 STRING_OUTPUT  Rx$;
 ANALOG_OUTPUT STATUS;
/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
	TCP_CLIENT TCPClient[5000];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
	STRING_PARAMETER 	_SKIP_,
						_SKIP_,
						_SKIP_,
						_SKIP_,
						_SKIP_,
						_SKIP_,
						_SKIP_,						
						IP$[30];
//					IP22$[30];




/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
 STRING  Tx$[200],TVIP$[40], MyMac$[40], AppString$[100], TvAppString$[100],RemoteNome$[100], EncTVIP$[40], EncMyMac$[40], EncAppString$[100], EncTvAppString$[100], EncRemoteNome$[100];
 INTEGER nConnected,nPort,timeout, cone;
 SIGNED_INTEGER siStatus;

 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

String_Function Gera(String Enc_Key$)
{
 	String Retorna$[300];
	String MensagePart1$[100];
	String Part1$[100];

  	String MensagePart2$[100];
	String Part2$[100];

   	String MensagePart3$[100];
	String Part3$[100];

  //	MensagePart1$ =  chr(0x64) + chr(0x00) + chr(Len(encode_base64(TVIP$, ""))) + chr(0x00) + encode_base64(TVIP$, "") 	+ chr(Len(encode_base64(MyMac$, ""))) 	+ chr(0x00) + encode_base64(MyMac$, "") + chr(length(encode_base64(RemoteNome$, ""))) 	+ chr(0x00) + encode_base64(RemoteNome$, "");	
	MensagePart1$ =  chr(0x64) + chr(0x00) + chr(Len(EncTVIP$)) 				+ chr(0x00) + EncTVIP$					+ chr(Len(EncMyMac$)) 					+ chr(0x00) + EncMyMac$ 				+ chr(Len(EncRemoteNome$)) 						+ chr(0x00)	+ EncRemoteNome$;
	Part1$= chr(0x00) + chr(Len(AppString$)) + chr(0x00) + AppString$ + chr(Len(MensagePart1$)) + chr(0x00) + MensagePart1$;	

	MensagePart2$ = chr(0xc8) + chr(0x00);
	Part2$ = chr(0x00) + chr(Len(AppString$)) + chr(0x00) + AppString$ + chr(Len(MensagePart2$)) + chr(0x00) + MensagePart2$;

   	MensagePart3$ = chr(0x00) + chr(0x00) + chr(0x00) + chr(Len(Enc_Key$)) + chr(0x00) + Enc_Key$;
  	Part3$ = chr(0x00) + chr(Len(TvAppString$)) + chr(0x00) + TvAppString$ + chr(Len(MensagePart3$)) + chr(0x00) + MensagePart3$;   
  
   	Retorna$ = Part1$ + Part2$ + Part3$; 
//   	Print("%s",Retorna$);
	timeout = 1000;
	cone = 0;
	cone = SocketConnectClient(TCPClient,IP$,nPort,0);   // Conecta

	while(nConnected <> 1  && timeout > 0){    // Nao esta conectado
//		Rx$="";
// 		Print ("Cone %d:",cone);
//		Print ("Status %d:",STATUS);

		Wait(10);
		timeout  = timeout - 1;
// STATUS = socketGetStatus();

	}
//    SocketConnectClient(TCPClient,IP$,nPort,0);   // Conecta
//	Wait(10);		
	socketSend(TCPClient,Retorna$);   // Envia dados para a TV 
	wait(2);
    socketDisconnectClient(TCPClient);
    Return (Retorna$);
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH KEY_POWEROFF {	Tx$ = Gera("S0VZX1BPV0VST0ZG");}
PUSH KEY_MUTE {	Tx$ = Gera("S0VZX01VVEU=");}
PUSH KEY_VOLUP {	Tx$ = Gera("S0VZX1ZPTFVQ");}
PUSH KEY_VOLDOWN {	Tx$ = Gera("S0VZX1ZPTERPV04=");}
PUSH KEY_EXIT {	Tx$ = Gera("S0VZX0VYSVQ=");}
PUSH KEY_RETURN {	Tx$ = Gera("S0VZX1JFVFVSTg==");}

SOCKETCONNECT TCPClient
{
    nConnected = 1;
	CONNECT_FB = nConnected;	
//	#IF_DEFINED DEBUG
		print("TV Connected");
//	#ENDIF
}
SOCKETDISCONNECT TCPClient
{
    nConnected = 0;
	CONNECT_FB = nConnected;	
//	#IF_DEFINED DEBUG
		print("TV disconnected");
//	#ENDIF
}
SOCKETRECEIVE TCPClient
{
	Rx$ = TCPClient.SocketRxBuf;	
	clearbuffer(TCPClient.SocketRxBuf);
}
SOCKETSTATUS TCPClient
{
    STATUS = socketGetStatus();
}


/*
EVENT
{
    // TODO:  Add code here
}
*/


/*
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	TVIP$="172.16.8.12";
	MyMac$ = "MCH - Automação"; 
  	AppString$ =  "iphone..iapp.samsung";
	TvAppString$ = "iphone..iapp.samsung";
	RemoteNome$ =  "MCH - Controle Remoto";
	nPort = 55000;

	EncTVIP$="MTcyLjE2LjguNzE=";
	EncMyMac$ = "TUNIIC0gQXV0b21hw6fDo28="; 
  	EncAppString$ =   "aXBob25lLi5pYXBwLnNhbXN1bmc=";
	EncTvAppString$ = "aXBob25lLi5pYXBwLnNhbXN1bmc=";
	EncRemoteNome$ =  "TUNIIC0gQ29udHJvbGUgUmVtb3Rv";
    siStatus = WaitForInitializationComplete();
	
//	#IF_DEFINED DEBUG
		print("WFIC Status: %d",siStatus);
//	#ENDIF
}


