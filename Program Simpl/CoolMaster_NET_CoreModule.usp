/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "CoolMaster_NET_CoreModule"
#HINT "CoolMaster_NET_CoreModule"
// #DEFINE_CONSTANT
// #CATEGORY "6" 
 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_INHERIT_FROM_PARENT
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   
   
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
STRING_INPUT fromModules[1024];
STRING_INPUT fromDevice[1024]; 

DIGITAL_OUTPUT Busy;
// ANALOG_OUTPUT 
STRING_OUTPUT toDevice, toModules; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER WaitingForReply;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING StringToSend[1024];
STRING HVAC_BUFF[10240];
STRING BufferToSend[10240];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function Send()
{
	
	if(Busy = 0)
	{
		Busy = 1;
		//print("Inside Send()\n");
		//print("BufferToSend -> %s\n",BufferToSend);
		StringToSend = remove("\x0A",BufferToSend,1);
		//print("StringToSend -> %s\n",StringToSend);
		toDevice = StringToSend;
		
	}
}

Function SendNext()
{
	//print("Inside SendNext()\n");
	StringToSend = remove("\x0A",BufferToSend,1);
	if(len(StringToSend))
	{
		toDevice = StringToSend;
		WaitingForReply = 1;
	}
    
	
	wait(300, ReplyWait)
	{
		WaitingForReply = 0;
		SendNext();
	}
		
}



/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE fromModules
{
	BufferToSend = BufferToSend + fromModules;
	clearbuffer(fromModules);
	
	//print("BufferToSend -> %s\n",BufferToSend);
	//print("Busy -> %d\n",Busy);
	if(Busy = 0)
    	Send();
}

CHANGE fromDevice
{
	integer temp;
    string stemp[1024], trash[10];
	HVAC_BUFF = HVAC_BUFF + fromDevice;
    
     
    if( find("$$\x0D\x0A",fromDevice,1) || find("Unknown Command\x0D\x0A",fromDevice,1) || find("parameters\x0D\x0A",fromDevice,1)|| find(">\x0D\x0A",fromDevice,1)|| find(">",fromDevice,1))
	{
		//if( len(BufferToSend) )
		if ( find("\x0A",BufferToSend,1) )
		{
			cancelwait(ReplyWait);
			WaitingForReply = 0;
			SendNext();
		}
		else
		{
			//toDevice = "stat3\x0D\x0A";
            Busy = 0;
            /*
			if(Busy = 1)
			{
				toDevice = "stat3\x0D\x0A";
				Busy = 0;
			}
			*/					
		}
		
	} 
        
	temp = find("\x0A",HVAC_BUFF);
	while(temp)
	{
		stemp = remove("\x0A", HVAC_BUFF, 1);
		
		if( find("ON ",stemp,1) || find("OFF",stemp,1) )
		{
			
			stemp = remove("\x0A", stemp, 1);
			if( left(stemp,2) = ">>" )
			{
				temp = getc(stemp);
				temp = getc(stemp);

				toModules = stemp;
				
			}
			else if( left(stemp,1) = ">" )
			{
				temp = getc(stemp);
				toModules = stemp;
				
			} 
			else
			{
				toModules = stemp;		
			}				 
			
		}
		temp = find("\x0A",HVAC_BUFF);	
		
	}	
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

